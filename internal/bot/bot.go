package bot

import (
	"carwash-bot/internal/storage"
	"log"
	"sync"

	"carwash-bot/config"
	"carwash-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type MessageHandler func(b *CarWashBot, update tgbotapi.Update, cfg *config.Config)

type CarWashBot struct {
	botAPI        *tgbotapi.BotAPI
	storage       *storage.Storage // –ó–∞–º–µ–Ω—è–µ–º schedule –Ω–∞ storage
	userStates    map[int64]models.UserState
	adminID       int64
	lastMessageID map[int64]int
	msgIDLock     sync.Mutex
	cfg           *config.Config // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞
	handlers      map[string]MessageHandler
	store         *storage.Storage
}

func New(config *config.Config, store *storage.Storage) (*CarWashBot, error) {
	botAPI, err := tgbotapi.NewBotAPI(config.BotToken)
	if err != nil {
		return nil, err
	}

	botAPI.Debug = true

	return &CarWashBot{
		botAPI:        botAPI,
		userStates:    make(map[int64]models.UserState),
		adminID:       config.AdminID,
		lastMessageID: make(map[int64]int),
		cfg:           config, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
		handlers:      make(map[string]MessageHandler),
		store:         store,
	}, nil

}

func (b *CarWashBot) Start() {
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", b.botAPI.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := b.botAPI.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.handleCallbackQuery(update.CallbackQuery)
		}
	}
}
func (b *CarWashBot) clearChat(chatID int64) {
	// 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—á–∏—Å—Ç–∫–∏
	msg := tgbotapi.NewMessage(chatID, "üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–∞...")
	sentMsg, _ := b.botAPI.Send(msg)

	// 2. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	updates := tgbotapi.NewUpdate(0)
	updates.Timeout = 60

	// 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
	b.msgIDLock.Lock()
	for msgID := range b.lastMessageID {
		if msgID == chatID {
			deleteMsg := tgbotapi.NewDeleteMessage(chatID, b.lastMessageID[msgID])
			b.botAPI.Request(deleteMsg)
		}
	}
	b.lastMessageID = make(map[int64]int) // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	b.msgIDLock.Unlock()

	// 4. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—á–∏—Å—Ç–∫–∏
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, sentMsg.MessageID)
	b.botAPI.Request(deleteMsg)

	// 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.sendWelcomeMessage(chatID)
}
